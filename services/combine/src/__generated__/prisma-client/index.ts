// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from 'graphql'
import { BaseClientOptions, makePrismaClientClass, Model } from 'prisma-client-lib'
import { typeDefs } from './prisma-schema'

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  issue: (where?: IssueWhereInput) => Promise<boolean>;
  item: (where?: ItemWhereInput) => Promise<boolean>;
}

export interface Node {
}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  issue: (where: IssueWhereUniqueInput) => IssueNullablePromise;
  issues: (args?: {
    where?: IssueWhereInput;
    orderBy?: IssueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Issue>;
  issuesConnection: (args?: {
    where?: IssueWhereInput;
    orderBy?: IssueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IssueConnectionPromise;
  item: (where: ItemWhereUniqueInput) => ItemNullablePromise;
  items: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Item>;
  itemsConnection: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ItemConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createIssue: (data: IssueCreateInput) => IssuePromise;
  updateIssue: (args: {
    data: IssueUpdateInput;
    where: IssueWhereUniqueInput;
  }) => IssuePromise;
  updateManyIssues: (args: {
    data: IssueUpdateManyMutationInput;
    where?: IssueWhereInput;
  }) => BatchPayloadPromise;
  upsertIssue: (args: {
    where: IssueWhereUniqueInput;
    create: IssueCreateInput;
    update: IssueUpdateInput;
  }) => IssuePromise;
  deleteIssue: (where: IssueWhereUniqueInput) => IssuePromise;
  deleteManyIssues: (where?: IssueWhereInput) => BatchPayloadPromise;
  createItem: (data: ItemCreateInput) => ItemPromise;
  updateItem: (args: {
    data: ItemUpdateInput;
    where: ItemWhereUniqueInput;
  }) => ItemPromise;
  updateManyItems: (args: {
    data: ItemUpdateManyMutationInput;
    where?: ItemWhereInput;
  }) => BatchPayloadPromise;
  upsertItem: (args: {
    where: ItemWhereUniqueInput;
    create: ItemCreateInput;
    update: ItemUpdateInput;
  }) => ItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  issue: (
    where?: IssueSubscriptionWhereInput
  ) => IssueSubscriptionPayloadSubscription;
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new(options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type IssueOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'txId_ASC'
  | 'txId_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'decimals_ASC'
  | 'decimals_DESC'
  | 'quantity_ASC'
  | 'quantity_DESC'
  | 'reissuable_ASC'
  | 'reissuable_DESC'
  | 'timestamp_ASC'
  | 'timestamp_DESC'
  | 'sender_ASC'
  | 'sender_DESC'
  | 'senderPublicKey_ASC'
  | 'senderPublicKey_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type ItemOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'txId_ASC'
  | 'txId_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'quantity_ASC'
  | 'quantity_DESC'
  | 'reissuable_ASC'
  | 'reissuable_DESC'
  | 'timestamp_ASC'
  | 'timestamp_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED';

export type IssueWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  txId?: Maybe<String>;
}>;

export interface IssueWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  txId?: Maybe<String>;
  txId_not?: Maybe<String>;
  txId_in?: Maybe<String[] | String>;
  txId_not_in?: Maybe<String[] | String>;
  txId_lt?: Maybe<String>;
  txId_lte?: Maybe<String>;
  txId_gt?: Maybe<String>;
  txId_gte?: Maybe<String>;
  txId_contains?: Maybe<String>;
  txId_not_contains?: Maybe<String>;
  txId_starts_with?: Maybe<String>;
  txId_not_starts_with?: Maybe<String>;
  txId_ends_with?: Maybe<String>;
  txId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  decimals?: Maybe<Int>;
  decimals_not?: Maybe<Int>;
  decimals_in?: Maybe<Int[] | Int>;
  decimals_not_in?: Maybe<Int[] | Int>;
  decimals_lt?: Maybe<Int>;
  decimals_lte?: Maybe<Int>;
  decimals_gt?: Maybe<Int>;
  decimals_gte?: Maybe<Int>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  reissuable?: Maybe<Boolean>;
  reissuable_not?: Maybe<Boolean>;
  timestamp?: Maybe<DateTimeInput>;
  timestamp_not?: Maybe<DateTimeInput>;
  timestamp_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timestamp_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timestamp_lt?: Maybe<DateTimeInput>;
  timestamp_lte?: Maybe<DateTimeInput>;
  timestamp_gt?: Maybe<DateTimeInput>;
  timestamp_gte?: Maybe<DateTimeInput>;
  sender?: Maybe<String>;
  sender_not?: Maybe<String>;
  sender_in?: Maybe<String[] | String>;
  sender_not_in?: Maybe<String[] | String>;
  sender_lt?: Maybe<String>;
  sender_lte?: Maybe<String>;
  sender_gt?: Maybe<String>;
  sender_gte?: Maybe<String>;
  sender_contains?: Maybe<String>;
  sender_not_contains?: Maybe<String>;
  sender_starts_with?: Maybe<String>;
  sender_not_starts_with?: Maybe<String>;
  sender_ends_with?: Maybe<String>;
  sender_not_ends_with?: Maybe<String>;
  senderPublicKey?: Maybe<String>;
  senderPublicKey_not?: Maybe<String>;
  senderPublicKey_in?: Maybe<String[] | String>;
  senderPublicKey_not_in?: Maybe<String[] | String>;
  senderPublicKey_lt?: Maybe<String>;
  senderPublicKey_lte?: Maybe<String>;
  senderPublicKey_gt?: Maybe<String>;
  senderPublicKey_gte?: Maybe<String>;
  senderPublicKey_contains?: Maybe<String>;
  senderPublicKey_not_contains?: Maybe<String>;
  senderPublicKey_starts_with?: Maybe<String>;
  senderPublicKey_not_starts_with?: Maybe<String>;
  senderPublicKey_ends_with?: Maybe<String>;
  senderPublicKey_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<IssueWhereInput[] | IssueWhereInput>;
  OR?: Maybe<IssueWhereInput[] | IssueWhereInput>;
  NOT?: Maybe<IssueWhereInput[] | IssueWhereInput>;
}

export type ItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  txId?: Maybe<String>;
}>;

export interface ItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  txId?: Maybe<String>;
  txId_not?: Maybe<String>;
  txId_in?: Maybe<String[] | String>;
  txId_not_in?: Maybe<String[] | String>;
  txId_lt?: Maybe<String>;
  txId_lte?: Maybe<String>;
  txId_gt?: Maybe<String>;
  txId_gte?: Maybe<String>;
  txId_contains?: Maybe<String>;
  txId_not_contains?: Maybe<String>;
  txId_starts_with?: Maybe<String>;
  txId_not_starts_with?: Maybe<String>;
  txId_ends_with?: Maybe<String>;
  txId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  reissuable?: Maybe<Boolean>;
  reissuable_not?: Maybe<Boolean>;
  timestamp?: Maybe<DateTimeInput>;
  timestamp_not?: Maybe<DateTimeInput>;
  timestamp_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timestamp_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timestamp_lt?: Maybe<DateTimeInput>;
  timestamp_lte?: Maybe<DateTimeInput>;
  timestamp_gt?: Maybe<DateTimeInput>;
  timestamp_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  OR?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  NOT?: Maybe<ItemWhereInput[] | ItemWhereInput>;
}

export interface IssueCreateInput {
  id?: Maybe<ID_Input>;
  txId: String;
  name: String;
  description: String;
  decimals: Int;
  quantity: Int;
  reissuable: Boolean;
  timestamp: DateTimeInput;
  sender: String;
  senderPublicKey: String;
}

export interface IssueUpdateInput {
  txId?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  decimals?: Maybe<Int>;
  quantity?: Maybe<Int>;
  reissuable?: Maybe<Boolean>;
  timestamp?: Maybe<DateTimeInput>;
  sender?: Maybe<String>;
  senderPublicKey?: Maybe<String>;
}

export interface IssueUpdateManyMutationInput {
  txId?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  decimals?: Maybe<Int>;
  quantity?: Maybe<Int>;
  reissuable?: Maybe<Boolean>;
  timestamp?: Maybe<DateTimeInput>;
  sender?: Maybe<String>;
  senderPublicKey?: Maybe<String>;
}

export interface ItemCreateInput {
  id?: Maybe<ID_Input>;
  txId: String;
  name: String;
  quantity: Int;
  reissuable: Boolean;
  timestamp: DateTimeInput;
}

export interface ItemUpdateInput {
  txId?: Maybe<String>;
  name?: Maybe<String>;
  quantity?: Maybe<Int>;
  reissuable?: Maybe<Boolean>;
  timestamp?: Maybe<DateTimeInput>;
}

export interface ItemUpdateManyMutationInput {
  txId?: Maybe<String>;
  name?: Maybe<String>;
  quantity?: Maybe<Int>;
  reissuable?: Maybe<Boolean>;
  timestamp?: Maybe<DateTimeInput>;
}

export interface IssueSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IssueWhereInput>;
  AND?: Maybe<IssueSubscriptionWhereInput[] | IssueSubscriptionWhereInput>;
  OR?: Maybe<IssueSubscriptionWhereInput[] | IssueSubscriptionWhereInput>;
  NOT?: Maybe<IssueSubscriptionWhereInput[] | IssueSubscriptionWhereInput>;
}

export interface ItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ItemWhereInput>;
  AND?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  OR?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  NOT?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Issue {
  id: ID_Output;
  txId: String;
  name: String;
  description: String;
  decimals: Int;
  quantity: Int;
  reissuable: Boolean;
  timestamp: DateTimeOutput;
  sender: String;
  senderPublicKey: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface IssuePromise extends Promise<Issue>, Fragmentable {
  id: () => Promise<ID_Output>;
  txId: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  decimals: () => Promise<Int>;
  quantity: () => Promise<Int>;
  reissuable: () => Promise<Boolean>;
  timestamp: () => Promise<DateTimeOutput>;
  sender: () => Promise<String>;
  senderPublicKey: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface IssueSubscription
  extends Promise<AsyncIterator<Issue>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  txId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  decimals: () => Promise<AsyncIterator<Int>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  reissuable: () => Promise<AsyncIterator<Boolean>>;
  timestamp: () => Promise<AsyncIterator<DateTimeOutput>>;
  sender: () => Promise<AsyncIterator<String>>;
  senderPublicKey: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IssueNullablePromise
  extends Promise<Issue | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  txId: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  decimals: () => Promise<Int>;
  quantity: () => Promise<Int>;
  reissuable: () => Promise<Boolean>;
  timestamp: () => Promise<DateTimeOutput>;
  sender: () => Promise<String>;
  senderPublicKey: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface IssueConnection {
  pageInfo: PageInfo;
  edges: IssueEdge[];
}

export interface IssueConnectionPromise
  extends Promise<IssueConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IssueEdge>>() => T;
  aggregate: <T = AggregateIssuePromise>() => T;
}

export interface IssueConnectionSubscription
  extends Promise<AsyncIterator<IssueConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IssueEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIssueSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface IssueEdge {
  node: Issue;
  cursor: String;
}

export interface IssueEdgePromise extends Promise<IssueEdge>, Fragmentable {
  node: <T = IssuePromise>() => T;
  cursor: () => Promise<String>;
}

export interface IssueEdgeSubscription
  extends Promise<AsyncIterator<IssueEdge>>,
    Fragmentable {
  node: <T = IssueSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIssue {
  count: Int;
}

export interface AggregateIssuePromise
  extends Promise<AggregateIssue>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIssueSubscription
  extends Promise<AsyncIterator<AggregateIssue>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Item {
  id: ID_Output;
  txId: String;
  name: String;
  quantity: Int;
  reissuable: Boolean;
  timestamp: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  id: () => Promise<ID_Output>;
  txId: () => Promise<String>;
  name: () => Promise<String>;
  quantity: () => Promise<Int>;
  reissuable: () => Promise<Boolean>;
  timestamp: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  txId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  reissuable: () => Promise<AsyncIterator<Boolean>>;
  timestamp: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ItemNullablePromise
  extends Promise<Item | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  txId: () => Promise<String>;
  name: () => Promise<String>;
  quantity: () => Promise<Int>;
  reissuable: () => Promise<Boolean>;
  timestamp: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface IssueSubscriptionPayload {
  mutation: MutationType;
  node: Issue;
  updatedFields: String[];
  previousValues: IssuePreviousValues;
}

export interface IssueSubscriptionPayloadPromise
  extends Promise<IssueSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IssuePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IssuePreviousValuesPromise>() => T;
}

export interface IssueSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IssueSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IssueSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IssuePreviousValuesSubscription>() => T;
}

export interface IssuePreviousValues {
  id: ID_Output;
  txId: String;
  name: String;
  description: String;
  decimals: Int;
  quantity: Int;
  reissuable: Boolean;
  timestamp: DateTimeOutput;
  sender: String;
  senderPublicKey: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface IssuePreviousValuesPromise
  extends Promise<IssuePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  txId: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  decimals: () => Promise<Int>;
  quantity: () => Promise<Int>;
  reissuable: () => Promise<Boolean>;
  timestamp: () => Promise<DateTimeOutput>;
  sender: () => Promise<String>;
  senderPublicKey: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface IssuePreviousValuesSubscription
  extends Promise<AsyncIterator<IssuePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  txId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  decimals: () => Promise<AsyncIterator<Int>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  reissuable: () => Promise<AsyncIterator<Boolean>>;
  timestamp: () => Promise<AsyncIterator<DateTimeOutput>>;
  sender: () => Promise<AsyncIterator<String>>;
  senderPublicKey: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface ItemPreviousValues {
  id: ID_Output;
  txId: String;
  name: String;
  quantity: Int;
  reissuable: Boolean;
  timestamp: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  txId: () => Promise<String>;
  name: () => Promise<String>;
  quantity: () => Promise<Int>;
  reissuable: () => Promise<Boolean>;
  timestamp: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  txId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  reissuable: () => Promise<AsyncIterator<Boolean>>;
  timestamp: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: 'Issue',
    embedded: false
  },
  {
    name: 'Item',
    embedded: false
  }
]

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://${process.env['PRISMA_HOST']}:4466`
})
export const prisma = new Prisma()

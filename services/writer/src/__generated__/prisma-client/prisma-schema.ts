// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateIssue {
  count: Int!
}

type AggregateItem {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Issue {
  id: ID!
  txId: String!
  name: String!
  description: String!
  decimals: Int!
  quantity: Int!
  reissuable: Boolean!
  timestamp: DateTime!
  sender: String!
  senderPublicKey: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type IssueConnection {
  pageInfo: PageInfo!
  edges: [IssueEdge]!
  aggregate: AggregateIssue!
}

input IssueCreateInput {
  id: ID
  txId: String!
  name: String!
  description: String!
  decimals: Int!
  quantity: Int!
  reissuable: Boolean!
  timestamp: DateTime!
  sender: String!
  senderPublicKey: String!
}

type IssueEdge {
  node: Issue!
  cursor: String!
}

enum IssueOrderByInput {
  id_ASC
  id_DESC
  txId_ASC
  txId_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  decimals_ASC
  decimals_DESC
  quantity_ASC
  quantity_DESC
  reissuable_ASC
  reissuable_DESC
  timestamp_ASC
  timestamp_DESC
  sender_ASC
  sender_DESC
  senderPublicKey_ASC
  senderPublicKey_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type IssuePreviousValues {
  id: ID!
  txId: String!
  name: String!
  description: String!
  decimals: Int!
  quantity: Int!
  reissuable: Boolean!
  timestamp: DateTime!
  sender: String!
  senderPublicKey: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type IssueSubscriptionPayload {
  mutation: MutationType!
  node: Issue
  updatedFields: [String!]
  previousValues: IssuePreviousValues
}

input IssueSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IssueWhereInput
  AND: [IssueSubscriptionWhereInput!]
  OR: [IssueSubscriptionWhereInput!]
  NOT: [IssueSubscriptionWhereInput!]
}

input IssueUpdateInput {
  txId: String
  name: String
  description: String
  decimals: Int
  quantity: Int
  reissuable: Boolean
  timestamp: DateTime
  sender: String
  senderPublicKey: String
}

input IssueUpdateManyMutationInput {
  txId: String
  name: String
  description: String
  decimals: Int
  quantity: Int
  reissuable: Boolean
  timestamp: DateTime
  sender: String
  senderPublicKey: String
}

input IssueWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  txId: String
  txId_not: String
  txId_in: [String!]
  txId_not_in: [String!]
  txId_lt: String
  txId_lte: String
  txId_gt: String
  txId_gte: String
  txId_contains: String
  txId_not_contains: String
  txId_starts_with: String
  txId_not_starts_with: String
  txId_ends_with: String
  txId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  decimals: Int
  decimals_not: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_gt: Int
  decimals_gte: Int
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  reissuable: Boolean
  reissuable_not: Boolean
  timestamp: DateTime
  timestamp_not: DateTime
  timestamp_in: [DateTime!]
  timestamp_not_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  sender: String
  sender_not: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_lt: String
  sender_lte: String
  sender_gt: String
  sender_gte: String
  sender_contains: String
  sender_not_contains: String
  sender_starts_with: String
  sender_not_starts_with: String
  sender_ends_with: String
  sender_not_ends_with: String
  senderPublicKey: String
  senderPublicKey_not: String
  senderPublicKey_in: [String!]
  senderPublicKey_not_in: [String!]
  senderPublicKey_lt: String
  senderPublicKey_lte: String
  senderPublicKey_gt: String
  senderPublicKey_gte: String
  senderPublicKey_contains: String
  senderPublicKey_not_contains: String
  senderPublicKey_starts_with: String
  senderPublicKey_not_starts_with: String
  senderPublicKey_ends_with: String
  senderPublicKey_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [IssueWhereInput!]
  OR: [IssueWhereInput!]
  NOT: [IssueWhereInput!]
}

input IssueWhereUniqueInput {
  id: ID
  txId: String
}

type Item {
  id: ID!
  txId: String!
  name: String!
  quantity: Int!
  reissuable: Boolean!
  timestamp: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ItemConnection {
  pageInfo: PageInfo!
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateInput {
  id: ID
  txId: String!
  name: String!
  quantity: Int!
  reissuable: Boolean!
  timestamp: DateTime!
}

type ItemEdge {
  node: Item!
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  txId_ASC
  txId_DESC
  name_ASC
  name_DESC
  quantity_ASC
  quantity_DESC
  reissuable_ASC
  reissuable_DESC
  timestamp_ASC
  timestamp_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ItemPreviousValues {
  id: ID!
  txId: String!
  name: String!
  quantity: Int!
  reissuable: Boolean!
  timestamp: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
  AND: [ItemSubscriptionWhereInput!]
  OR: [ItemSubscriptionWhereInput!]
  NOT: [ItemSubscriptionWhereInput!]
}

input ItemUpdateInput {
  txId: String
  name: String
  quantity: Int
  reissuable: Boolean
  timestamp: DateTime
}

input ItemUpdateManyMutationInput {
  txId: String
  name: String
  quantity: Int
  reissuable: Boolean
  timestamp: DateTime
}

input ItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  txId: String
  txId_not: String
  txId_in: [String!]
  txId_not_in: [String!]
  txId_lt: String
  txId_lte: String
  txId_gt: String
  txId_gte: String
  txId_contains: String
  txId_not_contains: String
  txId_starts_with: String
  txId_not_starts_with: String
  txId_ends_with: String
  txId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  reissuable: Boolean
  reissuable_not: Boolean
  timestamp: DateTime
  timestamp_not: DateTime
  timestamp_in: [DateTime!]
  timestamp_not_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
}

input ItemWhereUniqueInput {
  id: ID
  txId: String
}

scalar Long

type Mutation {
  createIssue(data: IssueCreateInput!): Issue!
  updateIssue(data: IssueUpdateInput!, where: IssueWhereUniqueInput!): Issue
  updateManyIssues(data: IssueUpdateManyMutationInput!, where: IssueWhereInput): BatchPayload!
  upsertIssue(where: IssueWhereUniqueInput!, create: IssueCreateInput!, update: IssueUpdateInput!): Issue!
  deleteIssue(where: IssueWhereUniqueInput!): Issue
  deleteManyIssues(where: IssueWhereInput): BatchPayload!
  createItem(data: ItemCreateInput!): Item!
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteManyItems(where: ItemWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  issue(where: IssueWhereUniqueInput!): Issue
  issues(where: IssueWhereInput, orderBy: IssueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Issue]!
  issuesConnection(where: IssueWhereInput, orderBy: IssueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IssueConnection!
  item(where: ItemWhereUniqueInput!): Item
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  node(id: ID!): Node
}

type Subscription {
  issue(where: IssueSubscriptionWhereInput): IssueSubscriptionPayload
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
}
`
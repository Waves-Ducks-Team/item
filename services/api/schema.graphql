scalar DateTime
scalar Json
scalar Upload

# Enums

enum UserRole {
  USER
  DAPP
}

enum UserPermission {
  COMMON
  DAPP
}

enum ItemOrderByInput {
  timestamp_ASC
  timestamp_DESC
}

# Directives

directive @auth(requires: UserPermission) on QUERY | MUTATION | FIELD | FIELD_DEFINITION
directive @internal on FIELD_DEFINITION

# Shared types

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type AuthPayload {
  token: String!
  user: User!
}

type PlatformStats {
  dapps: Int!
  items: Int!
  transactions: Int!
}

# Common

type User {
  id: ID!
  address: String!
  name: String
  email: String @internal

  # Access
  role: UserRole!
  permissions: [UserPermission!]!

  lots(cursorInfo: CursorInfo): LotConnection

  # Dapp fields
  image: Json
  meta: Json
  items: [Item!]

  totalItems: Int
}

type Item {
  id: ID!
  txId: String!
  dapp: User!

  name: String!
  quantity: Int!
  reissuable: Boolean!
  timestamp: DateTime!
  params: ItemParams!
  lots(cursorInfo: CursorInfo): LotConnection

  createdAt: DateTime!
  updatedAt: DateTime!
}

type ItemEdge {
  node: Item!,
  cursor: String!
}

type ItemConnection {
  pageInfo: PageInfo!
  edges: [ItemEdge!]
}

type ItemParams {
  id: ID!

  paramsId: String!
  txId: String!
  item: Item!

  version: Int!
  name: String!
  imageUrl: String!
  storageImageUrl: String
  misc: Json
  timestamp: DateTime!
}

type Lot {
  id: ID!

  txId: String!
  item: Item!
  seller: User

  priceAsset: String!
  price: Float!
  total: Int!
  left: Int!
  cancelled: Boolean
}

type LotEdge {
  node: Lot!
  cursor: String!
}

type LotConnection {
  pageInfo: PageInfo!
  edges: [LotEdge!]
}

# Inputs

input CursorInfo {
  after: String
  first: Int
}

input ItemFilter {
  dappAddress: String
  searchString: String
  inclusions: [String!]
}

input LotFilter {
  seller: String
}

input SigninUser {
  address: String!
  publicKey: String!
  sign: String!
  webappHost: String!
}

input DappInfo {
  name: String
  url: String
  description: String
  iconFile: Upload
  pageFile: Upload
}

input UserInfo {
  name: String
  email: String
}

# Queries

type Query {
  items(filter: ItemFilter, orderBy: ItemOrderByInput, cursorInfo: CursorInfo): ItemConnection
  item(assetId: String!): Item
  dapps: [User!]!
  user(address: String!): User
  inventory(address: String!, filter: ItemFilter, orderBy: ItemOrderByInput, cursorInfo: CursorInfo): ItemConnection
  lots(filter: LotFilter, cursorInfo: CursorInfo): LotConnection
  me: User @auth
  platformStats: PlatformStats!
}

# Mutations

type Mutation {
  signin(input: SigninUser!): AuthPayload!
  updateUserInfo(input: UserInfo!): User! @auth
  updateDappInfo(input: DappInfo!): User! @auth(requires: DAPP)
}

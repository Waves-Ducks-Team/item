// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql'
import { Item, ItemConnection, ItemEdge, ItemParams, PageInfo, User } from './prisma-client'
import { AuthPayload, Context, PlatformStats } from '../types'

export type ItemOrderByInput = 'timestamp_ASC' | 'timestamp_DESC'
export type UserRole = 'USER' | 'TEST' | 'DAPP'
export type UserPermission = 'COMMON' | 'DAPP'

export namespace QueryResolvers {
  export const defaultResolvers = {}

  export interface ItemFilter {
    dappAddress?: string | null
    searchString?: string | null
    inclusions?: string[] | null
    creatorRole?: string | null
  }

  export interface ArgsItems {
    filter?: ItemFilter | null
    orderBy?: ItemOrderByInput | null
    after?: string | null
    first?: number | null
  }

  export interface ArgsItem {
    assetId: string
  }

  export interface ArgsUser {
    address: string
  }

  export interface ArgsInventory {
    address: string
    orderBy?: ItemOrderByInput | null
  }

  export type ItemsResolver =
    | ((
    parent: undefined,
    args: ArgsItems,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ItemConnection | null | Promise<ItemConnection | null>)
    | {
    fragment: string
    resolve: (
      parent: undefined,
      args: ArgsItems,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ItemConnection | null | Promise<ItemConnection | null>
  }

  export type ItemResolver =
    | ((
    parent: undefined,
    args: ArgsItem,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Item | null | Promise<Item | null>)
    | {
    fragment: string
    resolve: (
      parent: undefined,
      args: ArgsItem,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item | null | Promise<Item | null>
  }

  export type DappsResolver =
    | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => User[] | Promise<User[]>)
    | {
    fragment: string
    resolve: (parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => User[] | Promise<User[]>
  }

  export type UserResolver =
    | ((
    parent: undefined,
    args: ArgsUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>)
    | {
    fragment: string
    resolve: (
      parent: undefined,
      args: ArgsUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>
  }

  export type InventoryResolver =
    | ((parent: undefined, args: ArgsInventory, ctx: Context, info: GraphQLResolveInfo) => Item[] | Promise<Item[]>)
    | {
    fragment: string
    resolve: (
      parent: undefined,
      args: ArgsInventory,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item[] | Promise<Item[]>
  }

  export type MeResolver =
    | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | null | Promise<User | null>)
    | {
    fragment: string
    resolve: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>
  }

  export type PlatformStatsResolver =
    | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => PlatformStats | Promise<PlatformStats>)
    | {
    fragment: string
    resolve: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PlatformStats | Promise<PlatformStats>
  }

  export interface Type {
    items:
      | ((
      parent: undefined,
      args: ArgsItems,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ItemConnection | null | Promise<ItemConnection | null>)
      | {
      fragment: string
      resolve: (
        parent: undefined,
        args: ArgsItems,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => ItemConnection | null | Promise<ItemConnection | null>
    }

    item:
      | ((
      parent: undefined,
      args: ArgsItem,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item | null | Promise<Item | null>)
      | {
      fragment: string
      resolve: (
        parent: undefined,
        args: ArgsItem,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Item | null | Promise<Item | null>
    }

    dapps:
      | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => User[] | Promise<User[]>)
      | {
      fragment: string
      resolve: (parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => User[] | Promise<User[]>
    }

    user:
      | ((
      parent: undefined,
      args: ArgsUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>)
      | {
      fragment: string
      resolve: (
        parent: undefined,
        args: ArgsUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>
    }

    inventory:
      | ((parent: undefined, args: ArgsInventory, ctx: Context, info: GraphQLResolveInfo) => Item[] | Promise<Item[]>)
      | {
      fragment: string
      resolve: (
        parent: undefined,
        args: ArgsInventory,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Item[] | Promise<Item[]>
    }

    me:
      | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | null | Promise<User | null>)
      | {
      fragment: string
      resolve: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>
    }

    platformStats:
      | ((
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PlatformStats | Promise<PlatformStats>)
      | {
      fragment: string
      resolve: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PlatformStats | Promise<PlatformStats>
    }
  }
}

export namespace ItemConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: ItemConnection) => parent.pageInfo,
    edges: (parent: ItemConnection) => parent.edges,
  }

  export type PageInfoResolver =
    | ((parent: ItemConnection, args: {}, ctx: Context, info: GraphQLResolveInfo) => PageInfo | Promise<PageInfo>)
    | {
    fragment: string
    resolve: (
      parent: ItemConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PageInfo | Promise<PageInfo>
  }

  export type EdgesResolver =
    | ((
    parent: ItemConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ItemEdge[] | null | Promise<ItemEdge[] | null>)
    | {
    fragment: string
    resolve: (
      parent: ItemConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ItemEdge[] | null | Promise<ItemEdge[] | null>
  }

  export interface Type {
    pageInfo:
      | ((parent: ItemConnection, args: {}, ctx: Context, info: GraphQLResolveInfo) => PageInfo | Promise<PageInfo>)
      | {
      fragment: string
      resolve: (
        parent: ItemConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PageInfo | Promise<PageInfo>
    }

    edges:
      | ((
      parent: ItemConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ItemEdge[] | null | Promise<ItemEdge[] | null>)
      | {
      fragment: string
      resolve: (
        parent: ItemConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => ItemEdge[] | null | Promise<ItemEdge[] | null>
    }
  }
}

export namespace PageInfoResolvers {
  export const defaultResolvers = {
    hasNextPage: (parent: PageInfo) => parent.hasNextPage,
    hasPreviousPage: (parent: PageInfo) => parent.hasPreviousPage,
    startCursor: (parent: PageInfo) => (parent.startCursor === undefined ? null : parent.startCursor),
    endCursor: (parent: PageInfo) => (parent.endCursor === undefined ? null : parent.endCursor),
  }

  export type HasNextPageResolver =
    | ((parent: PageInfo, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>)
    | {
    fragment: string
    resolve: (parent: PageInfo, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>
  }

  export type HasPreviousPageResolver =
    | ((parent: PageInfo, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>)
    | {
    fragment: string
    resolve: (parent: PageInfo, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>
  }

  export type StartCursorResolver =
    | ((parent: PageInfo, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>)
    | {
    fragment: string
    resolve: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>
  }

  export type EndCursorResolver =
    | ((parent: PageInfo, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>)
    | {
    fragment: string
    resolve: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>
  }

  export interface Type {
    hasNextPage:
      | ((parent: PageInfo, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>)
      | {
      fragment: string
      resolve: (parent: PageInfo, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>
    }

    hasPreviousPage:
      | ((parent: PageInfo, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>)
      | {
      fragment: string
      resolve: (parent: PageInfo, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>
    }

    startCursor:
      | ((parent: PageInfo, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>)
      | {
      fragment: string
      resolve: (
        parent: PageInfo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>
    }

    endCursor:
      | ((parent: PageInfo, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>)
      | {
      fragment: string
      resolve: (
        parent: PageInfo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>
    }
  }
}

export namespace ItemEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: ItemEdge) => parent.node,
    cursor: (parent: ItemEdge) => parent.cursor,
  }

  export type NodeResolver =
    | ((parent: ItemEdge, args: {}, ctx: Context, info: GraphQLResolveInfo) => Item | Promise<Item>)
    | {
    fragment: string
    resolve: (parent: ItemEdge, args: {}, ctx: Context, info: GraphQLResolveInfo) => Item | Promise<Item>
  }

  export type CursorResolver =
    | ((parent: ItemEdge, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: ItemEdge, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export interface Type {
    node:
      | ((parent: ItemEdge, args: {}, ctx: Context, info: GraphQLResolveInfo) => Item | Promise<Item>)
      | {
      fragment: string
      resolve: (parent: ItemEdge, args: {}, ctx: Context, info: GraphQLResolveInfo) => Item | Promise<Item>
    }

    cursor:
      | ((parent: ItemEdge, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: ItemEdge, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }
  }
}

export namespace ItemResolvers {
  export const defaultResolvers = {
    id: (parent: Item) => parent.id,
    txId: (parent: Item) => parent.txId,
    name: (parent: Item) => parent.name,
    quantity: (parent: Item) => parent.quantity,
    reissuable: (parent: Item) => parent.reissuable,
    timestamp: (parent: Item) => parent.timestamp,
    createdAt: (parent: Item) => parent.createdAt,
    updatedAt: (parent: Item) => parent.updatedAt,
  }

  export type IdResolver =
    | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export type TxIdResolver =
    | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export type DappResolver =
    | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>)
    | {
    fragment: string
    resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>
  }

  export type NameResolver =
    | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export type QuantityResolver =
    | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>)
    | {
    fragment: string
    resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>
  }

  export type ReissuableResolver =
    | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>)
    | {
    fragment: string
    resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>
  }

  export type TimestampResolver =
    | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export type ParamsResolver =
    | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => ItemParams | Promise<ItemParams>)
    | {
    fragment: string
    resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => ItemParams | Promise<ItemParams>
  }

  export type CreatedAtResolver =
    | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export type UpdatedAtResolver =
    | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export type BalanceResolver =
    | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | null | Promise<number | null>)
    | {
    fragment: string
    resolve: (
      parent: Item,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>
  }

  export interface Type {
    id:
      | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }

    txId:
      | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }

    dapp:
      | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>)
      | {
      fragment: string
      resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>
    }

    name:
      | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }

    quantity:
      | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>)
      | {
      fragment: string
      resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>
    }

    reissuable:
      | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>)
      | {
      fragment: string
      resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => boolean | Promise<boolean>
    }

    timestamp:
      | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }

    params:
      | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => ItemParams | Promise<ItemParams>)
      | {
      fragment: string
      resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => ItemParams | Promise<ItemParams>
    }

    createdAt:
      | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }

    updatedAt:
      | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }

    balance:
      | ((parent: Item, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | null | Promise<number | null>)
      | {
      fragment: string
      resolve: (
        parent: Item,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | null | Promise<number | null>
    }
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    address: (parent: User) => parent.address,
    name: (parent: User) => (parent.name === undefined ? null : parent.name),
    email: (parent: User) => (parent.email === undefined ? null : parent.email),
    role: (parent: User) => parent.role,
    permissions: (parent: User) => parent.permissions,
    image: (parent: User) => (parent.image === undefined ? null : parent.image),
    meta: (parent: User) => (parent.meta === undefined ? null : parent.meta),
  }

  export type IdResolver =
    | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export type AddressResolver =
    | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export type NameResolver =
    | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>)
    | {
    fragment: string
    resolve: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>
  }

  export type EmailResolver =
    | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>)
    | {
    fragment: string
    resolve: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>
  }

  export type RoleResolver =
    | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => UserRole | Promise<UserRole>)
    | {
    fragment: string
    resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => UserRole | Promise<UserRole>
  }

  export type PermissionsResolver =
    | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => UserPermission[] | Promise<UserPermission[]>)
    | {
    fragment: string
    resolve: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserPermission[] | Promise<UserPermission[]>
  }

  export type ImageResolver =
    | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>)
    | {
    fragment: string
    resolve: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>
  }

  export type MetaResolver =
    | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>)
    | {
    fragment: string
    resolve: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>
  }

  export type ItemsResolver =
    | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Item[] | null | Promise<Item[] | null>)
    | {
    fragment: string
    resolve: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Item[] | null | Promise<Item[] | null>
  }

  export type TotalItemsResolver =
    | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | null | Promise<number | null>)
    | {
    fragment: string
    resolve: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>
  }

  export interface Type {
    id:
      | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }

    address:
      | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }

    name:
      | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>)
      | {
      fragment: string
      resolve: (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>
    }

    email:
      | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>)
      | {
      fragment: string
      resolve: (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>
    }

    role:
      | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => UserRole | Promise<UserRole>)
      | {
      fragment: string
      resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => UserRole | Promise<UserRole>
    }

    permissions:
      | ((
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserPermission[] | Promise<UserPermission[]>)
      | {
      fragment: string
      resolve: (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => UserPermission[] | Promise<UserPermission[]>
    }

    image:
      | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>)
      | {
      fragment: string
      resolve: (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>
    }

    meta:
      | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>)
      | {
      fragment: string
      resolve: (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>
    }

    items:
      | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Item[] | null | Promise<Item[] | null>)
      | {
      fragment: string
      resolve: (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Item[] | null | Promise<Item[] | null>
    }

    totalItems:
      | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | null | Promise<number | null>)
      | {
      fragment: string
      resolve: (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | null | Promise<number | null>
    }
  }
}

export namespace ItemParamsResolvers {
  export const defaultResolvers = {
    id: (parent: ItemParams) => parent.id,
    paramsId: (parent: ItemParams) => parent.paramsId,
    txId: (parent: ItemParams) => parent.txId,
    version: (parent: ItemParams) => parent.version,
    name: (parent: ItemParams) => parent.name,
    imageUrl: (parent: ItemParams) => parent.imageUrl,
    misc: (parent: ItemParams) => (parent.misc === undefined ? null : parent.misc),
    timestamp: (parent: ItemParams) => parent.timestamp,
  }

  export type IdResolver =
    | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export type ParamsIdResolver =
    | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export type TxIdResolver =
    | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export type ItemResolver =
    | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => Item | Promise<Item>)
    | {
    fragment: string
    resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => Item | Promise<Item>
  }

  export type VersionResolver =
    | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>)
    | {
    fragment: string
    resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>
  }

  export type NameResolver =
    | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export type ImageUrlResolver =
    | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export type MiscResolver =
    | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | null | Promise<string | null>)
    | {
    fragment: string
    resolve: (
      parent: ItemParams,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>
  }

  export type TimestampResolver =
    | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export interface Type {
    id:
      | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }

    paramsId:
      | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }

    txId:
      | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }

    item:
      | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => Item | Promise<Item>)
      | {
      fragment: string
      resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => Item | Promise<Item>
    }

    version:
      | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>)
      | {
      fragment: string
      resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>
    }

    name:
      | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }

    imageUrl:
      | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }

    misc:
      | ((
      parent: ItemParams,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>)
      | {
      fragment: string
      resolve: (
        parent: ItemParams,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>
    }

    timestamp:
      | ((parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: ItemParams, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }
  }
}

export namespace PlatformStatsResolvers {
  export const defaultResolvers = {
    dapps: (parent: PlatformStats) => parent.dapps,
    items: (parent: PlatformStats) => parent.items,
    transactions: (parent: PlatformStats) => parent.transactions,
  }

  export type DappsResolver =
    | ((parent: PlatformStats, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>)
    | {
    fragment: string
    resolve: (parent: PlatformStats, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>
  }

  export type ItemsResolver =
    | ((parent: PlatformStats, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>)
    | {
    fragment: string
    resolve: (parent: PlatformStats, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>
  }

  export type TransactionsResolver =
    | ((parent: PlatformStats, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>)
    | {
    fragment: string
    resolve: (parent: PlatformStats, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>
  }

  export interface Type {
    dapps:
      | ((parent: PlatformStats, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>)
      | {
      fragment: string
      resolve: (parent: PlatformStats, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>
    }

    items:
      | ((parent: PlatformStats, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>)
      | {
      fragment: string
      resolve: (parent: PlatformStats, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>
    }

    transactions:
      | ((parent: PlatformStats, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>)
      | {
      fragment: string
      resolve: (parent: PlatformStats, args: {}, ctx: Context, info: GraphQLResolveInfo) => number | Promise<number>
    }
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {}

  export interface SigninUser {
    address: string
    publicKey: string
    sign: string
    webappHost: string
  }

  export interface UserInfo {
    name?: string | null
    email?: string | null
  }

  export interface DappInfo {
    name?: string | null
    url?: string | null
    description?: string | null
    iconFile?: string | null
    pageFile?: string | null
  }

  export interface ArgsSignin {
    input: SigninUser
  }

  export interface ArgsUpdateUserInfo {
    input: UserInfo
  }

  export interface ArgsUpdateTestRole {
    enable: boolean
  }

  export interface ArgsUpdateDappInfo {
    input: DappInfo
  }

  export type SigninResolver =
    | ((
    parent: undefined,
    args: ArgsSignin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>)
    | {
    fragment: string
    resolve: (
      parent: undefined,
      args: ArgsSignin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>
  }

  export type UpdateUserInfoResolver =
    | ((parent: undefined, args: ArgsUpdateUserInfo, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>)
    | {
    fragment: string
    resolve: (
      parent: undefined,
      args: ArgsUpdateUserInfo,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>
  }

  export type UpdateTestRoleResolver =
    | ((parent: undefined, args: ArgsUpdateTestRole, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>)
    | {
    fragment: string
    resolve: (
      parent: undefined,
      args: ArgsUpdateTestRole,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>
  }

  export type UpdateDappInfoResolver =
    | ((parent: undefined, args: ArgsUpdateDappInfo, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>)
    | {
    fragment: string
    resolve: (
      parent: undefined,
      args: ArgsUpdateDappInfo,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>
  }

  export interface Type {
    signin:
      | ((
      parent: undefined,
      args: ArgsSignin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>)
      | {
      fragment: string
      resolve: (
        parent: undefined,
        args: ArgsSignin,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthPayload | Promise<AuthPayload>
    }

    updateUserInfo:
      | ((parent: undefined, args: ArgsUpdateUserInfo, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>)
      | {
      fragment: string
      resolve: (
        parent: undefined,
        args: ArgsUpdateUserInfo,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>
    }

    updateTestRole:
      | ((parent: undefined, args: ArgsUpdateTestRole, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>)
      | {
      fragment: string
      resolve: (
        parent: undefined,
        args: ArgsUpdateTestRole,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>
    }

    updateDappInfo:
      | ((parent: undefined, args: ArgsUpdateDappInfo, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>)
      | {
      fragment: string
      resolve: (
        parent: undefined,
        args: ArgsUpdateDappInfo,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>
    }
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user,
  }

  export type TokenResolver =
    | ((parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
    | {
    fragment: string
    resolve: (parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }

  export type UserResolver =
    | ((parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>)
    | {
    fragment: string
    resolve: (parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>
  }

  export interface Type {
    token:
      | ((parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
      | {
      fragment: string
      resolve: (parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
    }

    user:
      | ((parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>)
      | {
      fragment: string
      resolve: (parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>
    }
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type
  ItemConnection: ItemConnectionResolvers.Type
  PageInfo: PageInfoResolvers.Type
  ItemEdge: ItemEdgeResolvers.Type
  Item: ItemResolvers.Type
  User: UserResolvers.Type
  ItemParams: ItemParamsResolvers.Type
  PlatformStats: PlatformStatsResolvers.Type
  Mutation: MutationResolvers.Type
  AuthPayload: AuthPayloadResolvers.Type
}

// @ts-ignore
declare module 'graphql-tools' {
  interface IResolvers extends Resolvers {
  }
}
